# Site
repository: hoyo1744/hoyo1744.github.io
#favicon: images/favicon.ico

# Content configuration version
version: 2

# Personal info
name: 엄호용
title: Backend Developer
email: hoyo1744@gmail.com
website: https://velog.io/@hoyo1744

# Dark Mode (true/false/never)
dark_mode: false

# Social links
github_username: hoyo1744


# Additional icon links
additional_links:
- title: velog
  icon: fas fa-globe
  url: https://velog.io/@hoyo1744/posts

# About Section
about_title: About Me
about_profile_image: images/profile.jpg
about_content: | # this will include new lines to allow paragraphs

  6년차 백엔드 개발자로 보안·관제 플랫폼을 개발·운영하며, 실시간 V3 모니터링 및 대시보드, 데이터 배치 처리 영역을 담당하고 있습니다.

  대규모 트래픽 환경에서도 안정적으로 운영 가능한 시스템을 목표로 ***서비스 안정화***와 ***성능 개선***에 집중하고 있습니다.
  
  원칙을 지키되, 상황에 맞는 ***실용적인 선택***을 중시하고, 팀원들과의 기술 토론을 통해 ***유지보수성과 성능***을 함께 고려한 해결책을 도출합니다.
  
  학습한 내용과 문제 해결 경험은 블로그에 기록하고 있으며, 이를 통해 ***개인의 성장 → 조직의 성장***으로 확장하는 것을 지향합니다.

content:
  - title: Experience 
    layout: list 
    content:
      - layout: left
        title: 안랩
        sub_title: 
          Java 기반 보안·관제 플랫폼
        caption: 
          2022.01 ~ 현재
        quote: >
          16만 명 활성 사용자 · 파드당 472 TPS를 안정적으로 처리하는 보안·관제 플랫폼 개발 및 성능·안정화 주도
        description: | 
          - Read·Write 트래픽 분리로 Write ***TPS 31%*** 개선
          - Kafka Producer · Consumer 에서 배치 처리로 메시지 처리 ***TPS 16%*** 개선 및 메시지 유실 방지
          - PostgreSQL → MongoDB로 변환해 ***조회 최적화***
          - MongoDB 샤딩, Batch-Processor 병렬처리로 ETL 처리 속도 ***9분 → 30초*** 단축
          - 팀내 테스트 도입 및 ***BVT(Build Verification Test)*** 자동화 구축으로 인력 효율화
          - 인덱스, 쿼리 튜닝, Linux 시스템 설정 최적화를 통한 성능 개선

      - layout: left
        title: 안랩
        sub_title: 
          C++ 기반 보안·관제 플랫폼
        caption: 2019.09 ~ 2021.12
        quote: >
          C++ 기반 보안·관제 플랫폼 서버 및 클라이언트 개발 (Linux / Windows)
        description: | 
          - Epoll 기반의 비동기 Linux 보안·관제 플랫폼 서버 개발
          - IOCP 기반의 비동기 Windows 보안·관제 플랫폼 서버 개발
          - Linux 서버 취약점 패키지 관리 클라이언트 개발

        

  - title: Project # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: <span style="font-size:18px">Read·Write 트래픽 분리와 최적화로 성능 개선 및 SLO 보장</span>
        quote: >
          CQRS 기반 Read·Write 분리와 최적화로 SLO(300ms) 달성 및 TPS 31% 개선
        description: | # this will include new lines to allow paragraphs
          - ***문제***
            - 피크타임인 09:00에 트래픽이 몰리면서 ***SLO(응답 300ms)***를 충족하지 못하는 문제 발생
          - ***원인***
            - Read·Write 트래픽이 동일한 서비스에서 ***Blocking 작업***으로 처리되며 자원 고갈 발생  
          - ***해결***  
            - API 서비스를 ***조회 전용(Read) 서비스***와 ***쓰기 전용(Write) 서비스***로 분리하여 **CQRS 패턴 적용**
            - ***Read 서비스*** : 캐시를 활용해 빠른 조회 응답 제공
            - ***Write 서비스*** : 원장 DB에만 집중하도록 하여 트랜잭션 안정성 확보
            - Write 경로의 ***Tomcat maxThreads*** 및 ***Connection Pool*** 최적화  
          - ***성과***  
            - SLO 준수(응답 300ms)
            - Read 병목 제거 및 Write ***TPS 31%*** 개선
            
      - layout: left
        title: <span style="font-size:18px">Kafka Consumer·Producer 배치 처리로 상태 처리 지연 문제 개선</span>
        quote: >
          배치 전송·처리와 DLQ 도입으로 지연 문제 해소 및 메시지 유실 방지
        description: | # this will include new lines to allow paragraphs
          - ***문제***
            - 피크타임인 09:00에 트래픽이 몰리면서 대시보드에서 V3 상태 처리가 지연되는 문제 발생
          - ***원인***
            - Producer·Consumer가 메시지를 단건 처리하여 전체 처리량 저하
          - ***해결***
            - Kafka Producer·Consumer에 ***배치 전송 및 처리*** 적용
            - ***DLQ(Dead Letter Queue)*** 도입으로 메시지 유실 대비
          - ***성과***
            - 메시지 처리 ***TPS 16%*** 개선
            - 메시지 유실에 대한 안정성 강화


      - layout: left
        title: <span style="font-size:18px">보고서 전용 데이터 분리로 조회 성능 최적화</span>
        quote: > 
          조회 전용 Materialized View 도입으로 보고서 조회 성능 최적화
        description: | # this will include new lines to allow paragraphs
          - ***문제***
            - 관리자가 지난 1년간 악성 코드 감염 현황 보고서를 생성할 때 쿼리 지연으로 실패하거나 오래 걸리는 문제 발생
          - ***원인***
            - PostgreSQL에서 여러 테이블을 직접 조인하며 보고서를 생성하면서 지연 발생
          - ***해결***
            - 배치 프로세스를 통해 주기적으로 PostgreSQL 데이터를 읽어 **조회 전용 비정규화 문서**로 변환  
            - 변환된 데이터를 MongoDB에 스냅샷(Materialized View) 형태로 저장  
            - 보고서 조회 시, MongoDB 스냅샷을 활용해 **빠르고 안정적인 조회 성능 확보**
          - **성과**  
            - 보고서 생성 시간 **수 분 → 수 초 단축**  
            - 관리자가 안정적으로 장기 통계 조회 가능  
            - 운영 DB(PostgreSQL) 부하 감소로 서비스 안정성 강화


      - layout: left
        title: <span style="font-size:18px">MongoDB 샤딩 및 배치 서비스 병렬처리로 ETL 성능 최적화</span>
        quote: >
          MongoDB 샤딩 및 Spring Batch 도입으로 ETL 안정성과 처리 성능 향상
        description: | # this will include new lines to allow paragraphs
          - ***문제***
            - 피크타임인 09:00에 V3 상태 변경에 대한 ETL 처리 지연 발생
          - ***원인***
            - 단일 노드 MongoDB 운영으로 인한 Read · Write 성능 저하
            - Lacacy Batch-Processor가 병렬 처리를 지원하지 않아 대량 데이터 처리에 한계
          - ***해결***
            - MongoDB 샤딩 적용을 통한 데이터 분산 처리
            - Legacy Batch-Processor를 Spring Batch 기반으로 재구축하고 병렬 처리 지원
          - ***성과***
            - **MongoDB → Batch-Processor → PostgreSQL**로 이어지는 ETL 파이프라인의 처리 성능을 ***9분 -> 10~30초***로 개선
            - Spring Batch 적용으로 Retry, Skip 정책 고도화 및 데이터 처리 속도 향상
          
        
      - layout: left
        title: <span style="font-size:18px">테스트 도입</span>
        description: | # this will include new lines to allow paragraphs
          - 팀 내 테스트 환경 미흡으로 ***TestContainer 기반 테스트 환경 구축***
          - ELK 스택 기반 **BVT(Build Verification Test) 자동화 환경** 및 사내 메신저 알람 시스템 구축
            
      - layout: left
        title: <span style="font-size:18px">서비스 안정화</span>
        description: | # this will include new lines to allow paragraphs
          - PostgreSQL에서 ShareLock과 Row ExclusiveLock의 충돌로 데드락 발생, CPU 과점유 문제 개선 ([분석문서](https://velog.io/@hoyo1744/PostgreSQL의-ShareLock-ExclusiveLock))
          - 13초 이상 소요되는 쿼리를 CTE를 활용해 1.3로 성능 개선 ([분석문서](https://velog.io/@hoyo1744/PostgreSQL-%EC%8A%A4%EC%B9%BC%EB%9D%BC-%EC%84%9C%EB%B8%8C-%EC%BF%BC%EB%A6%AC%EB%A5%BC-CTE%EB%A1%9C-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0))

  - title: Activity
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: 백엔드 부트캠프 
        sub_title: Loopers 현직자 백엔드 과정
        description: | # this will include new lines to allow paragraphs
          루프팩 백엔드 1기 교육 

      - layout: left
        title: 사내 테스트 스터디 
        description: | # this will include new lines to allow paragraphs
          팀내 테스트 도입을 위한 스터디 주도


  - title: Skill # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Backend
        description: | # this will include new lines to allow paragraphs
          - Java
          - Spring Boot, Spring Batch
          - JPA, QueryDSL
          - JUnit5, Mockito, RestAssured
          - Gradle, Maven
          - JMeter
      - layout: left
        title: Infrastructure & Data
        description: | # this will include new lines to allow paragraphs
          - MySQL
          - PostgreSQL
          - Kafka, Redis
          - MongoDB

  - title: Certificate # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: 정보처리기사
        description: | # this will include new lines to allow paragraphs
          - 한국산업인력공단

# Footer
footer_show_references: true
# references_title: References on request (Override references text)

# Build settings
remote_theme: sproogen/resume-theme

sass:
  sass_dir: _sass
  style: compressed

plugins:
 - jekyll-seo-tag
